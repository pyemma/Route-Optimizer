<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
        html
        {
            height: 100%;
        }
        body
        {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #map_canvas
        {
            height: 100%;
        }
    </style>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBPkancyQzfEDt-c8kZSyBj99TFS_-FiYE&sensor=false">
    </script>
    <script type="text/javascript">
        var map;
        var directionsDisplay;
        var directionsService;
	var responseTotal = new Array();
	var count_res = 0;
	var ansRoute = new Array();
	var count_ans = 0;
	var position = new Array();
	var count = 0;
	var count_route = 0;
	var distance = new Array();
	var count_dis = 0;
	var dis = 0;

        function initialize(var1,var2) {
            // Instantiate a directions service.
            directionsService = new google.maps.DirectionsService();

            // Create a map and center it on Manhattan.
            var buaa = new google.maps.LatLng(var1, var2);
            var mapOptions = {
                zoom: 15,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: buaa
            }
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

            // Create a renderer for directions and bind it to the map.
            var rendererOptions = {
                map: map
            }
	    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	    google.maps.event.addListener(map, 'click', addLatLng);

        }

        /*function calcRoute() {

            // Retrieve the start and end locations and create
	    // a DirectionsRequest using WALKING directions.
		var i,j;
		for(i=0;i<position.length;i++){
			for(j=0;j<position.length;j++){

            			var start = position[i];
            			var end = position[j];
            			var request = {
                			origin: start,
                			destination: end,
                			travelMode: google.maps.TravelMode.WALKING
            			};
				//alert(i,j);
            			// Route the directions and pass the response to a
            			// function to create markers for each step.
				getOneQuery(request);
			}
		}
		alert(count_dis);
	}
		function getOneQuery(request){
				directionsService.route(request, function (response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					document.getElementById("hid").value = response.routes[0].legs[0].distance.value;
					//myDraw(response);
					//directionsDisplay.setDirections(response);
					distance[count_dis] = response.routes[0].legs[0].distance.value;
					count_dis++;
					responseTotal[count_res] = response;
					count_res++;
					//myDraw(response);
				}
				else if(status == google.maps.DirectionsStatus.OVER_QUERY_LIMIT){
				setTimeout(function(){ 
					getOneQuery(request);}, 200);
				}
				else{
					//alert("One path not found!");
					distance[count_dis] = 0xFFFF;
					count_dis++;
					responseTotal[count_res] = null;
					count_res++;
				}
				});
		}*/

 	function calcRoute(var1, var2) {

            		var start = position[var1];
            		var end = position[var2];
            		var request = {
               			origin: start,
               			destination: end,
               			travelMode: google.maps.TravelMode.WALKING
      			};
 
			directionsService.route(request, function (response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					myDraw(response);
				}
				});
	}
	/*function calcMatrixDistance(){
		var service = new google.maps.DistanceMatrixService();
		service.getDistanceMatrix(
			{
			origins: position,
			destinations: position,
			travelMode: google.maps.TravelMode.DRIVING
			}, callback);
		}*/
	function calcMatrixDistance(var1,var2){
		var service = new google.maps.DistanceMatrixService();
		var starts = new Array();
		var j = 0;
		for(var i=var1;i<var2;i++){
			starts[j] = position[i];
			j++;
		}
		service.getDistanceMatrix(
				{
				origins: starts,
				destinations: position,
				travelMode: google.maps.TravelMode.DRIVING
				}, callback);
	}

	function callback(response, status){
		alert(status);
		if(status == google.maps.DistanceMatrixStatus.OK){
			var origins = response.originAddresses;
			var destinations = response.originAddresses;
			var str = "";
			for(var i=0;i<origins.length;i++){
				var result = response.rows[i].elements;
				distance[i] = new Array();
				for(var j=0;j<result.length;j++){
					var element = result[j];
					k = element.distance.value;
					window.external.fillInMatrix(i,j,k);
					distance[i][j] = element.distance.value;
				}
			}
		}
	}


	function myDraw(response){
		var drivingCoordinates = new Array();
		//alert(response.routes[0].legs[0].steps.length);
		var i,j,k = 0;
		for(i=0;i<response.routes[0].legs[0].steps.length;i++){
			//var x = response.routes[0].legs[0].steps[i].start_location.lat();
			//var y = response.routes[0].legs[0].steps[i].start_location.lng();
			//drivingCoordinates[k] = new google.maps.LatLng(x, y);
			drivingCoordinates[k] = response.routes[0].legs[0].steps[i].start_location;
			k++;
			}
			drivingCoordinates[k] = response.routes[0].legs[0].steps[i-1].end_location;
		/*var drivingCoordinates = [
			new google.maps.LatLng(40.74971, -73.99156),
			new google.maps.LatLng(40.74847, -73.99264),
			new google.maps.LatLng(40.74727, -73.98962),
			new google.maps.LatLng(40.75989, -73.98044),
			new google.maps.LatLng(40.75855, -73.97720)];*/

		var drivingPath = new google.maps.Polyline({
			path: drivingCoordinates,
			strokeColor: "#FF0000",
			strokeOpacity: 1.0,
			strokeWeight: 1
			});
		drivingPath.setMap(map);	
	}
	function addLatLng(event){
		position[count] = event.latLng;
		//window.external.setLatAndLng(count,position[count].lat,position[count].lng);
		count++;
		//alert(position.length);
		var marker = new google.maps.Marker({
			position: event.latLng,
			map: map,
			title: "Hello"
			});		
	}
	function drawRoute(){
		var ans = new Array();
		var n = position.length;
		for(var i=0;i<n;i++)
			ans[i] = i;
		for(var i=1;i<n;i++){
			var temp = ans[i-1]*n+ans[i];
			ansRoute[count_ans] = responseTotal[temp];
			count_ans++;
		}
		myDraw(ansRoute);
	}
	function getDistance(){
		var str = "";
		for(var i=0;i<distance.length;i++)
			str += distance[i].toString()+",";
		alert(str);
		document.getElementById("hid").value = str;
	}

	function getPosition(){
		for(var i=0;i<position.length;i++){
			//var lat = position[i].lat;
			//var lng = position[i].lng;
			//alert(lat,lng);
			window.external.setLatAndLng(i,position[i].lat(),position[i].lng());
		}
		return position.length;
	}

	function Check(){
		var str = "";
		for(var i=0;i<distance.length;i++)
			for(var j=0;j<distance[i].length;j++)
			{
				str += distance[i][j].toString() + ",";
			}
		document.getElementById("hid").value = str;
	}
	function test(){
		var i = 1.1, j = 2.2;
		var str = window.external.myTest(i,j);
		alert(str);
	}
		
    </script>
    <title></title>
</head>
<body onload="initialize(39.9793974,116.3426721)">
<div id="map_canvas" style="width: 100%; height: 100%"></div>
<p id="demo">My First Paragraph</p>
<input type="hidden" id="hid">
<input type="hidden" id="hid2">
</body>
</html>
