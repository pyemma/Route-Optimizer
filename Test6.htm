<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
        html
        {
            height: 100%;
        }
        body
        {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #map_canvas
        {
            height: 100%;
        }
    </style>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBPkancyQzfEDt-c8kZSyBj99TFS_-FiYE&sensor=false">
    </script>
    <script type="text/javascript">
        var map;
        var directionsDisplay;
        var directionsService;
	var responseTotal = new Array();
	var count_res = 0;
	var ansRoute = new Array();
	var count_ans = 0;
	var position = new Array();
	var count = 0;
	var count_route = 0;
	var distance = new Array();
	var count_dis = 0;
	var dis = 0;
	var geocoder;
	var markerArray = new Array();
	var pathArray = new Array();

        function initialize(var1,var2) {
            // Instantiate a directions service.
		directionsService = new google.maps.DirectionsService();
		geocoder = new google.maps.Geocoder();

            // Create a map and center it on Manhattan.
            var manhattan = new google.maps.LatLng(var1, var2);
            var mapOptions = {
                zoom: 16,
                mapTypeId: google.maps.MapTypeId.ROADMAP,
                center: manhattan
            }
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

            // Create a renderer for directions and bind it to the map.
            var rendererOptions = {
                map: map
            }
	    directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
	    google.maps.event.addListener(map, 'click', addLatLng);

        }

 	function calcRoute(var1, var2) {

            		var start = position[var1];
            		var end = position[var2];
            		var request = {
               			origin: start,
               			destination: end,
               			travelMode: google.maps.TravelMode.WALKING
      			};
 
			directionsService.route(request, function (response, status) {
				if (status == google.maps.DirectionsStatus.OK) {
					myDraw(response);
				}
				});
	}
	/*function calcMatrixDistance(){
		var service = new google.maps.DistanceMatrixService();
		service.getDistanceMatrix(
			{
			origins: position,
			destinations: position,
			travelMode: google.maps.TravelMode.DRIVING
			}, callback);
		}*/
	function calcMatrixDistance(var1,var2){
		var service = new google.maps.DistanceMatrixService();
		var starts = new Array();
		var j = 0;
		for(var i=var1;i<var2;i++){
			starts[j] = position[i];
			j++;
		}
		service.getDistanceMatrix(
				{
				origins: starts,
				destinations: position,
				travelMode: google.maps.TravelMode.DRIVING
				}, callback);
	}

	function callback(response, status){
		alert(status);
		if(status == google.maps.DistanceMatrixStatus.OK){
			var origins = response.originAddresses;
			var destinations = response.originAddresses;
			var str = "";
			for(var i=0;i<origins.length;i++){
				var result = response.rows[i].elements;
				distance[i] = new Array();
				for(var j=0;j<result.length;j++){
					var element = result[j];
					k = element.distance.value;
					window.external.fillInMatrix(i,j,k);
					distance[i][j] = element.distance.value;
				}
			}
		}
	}


	function myDraw(response){
		var drivingCoordinates = new Array();
		var i,j,k = 0;
		for(i=0;i<response.routes[0].legs[0].steps.length;i++){
			drivingCoordinates[k] = response.routes[0].legs[0].steps[i].start_location;
			k++;
			}
			drivingCoordinates[k] = response.routes[0].legs[0].steps[i-1].end_location;
		var lineSymbol = {
  			path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW
		};
		
		var drivingPath = new google.maps.Polyline({
			path: drivingCoordinates,
			strokeColor: "#FF0000",
			strokeOpacity: 1.0,
			strokeWeight: 5,
			icons: [{
				icon: lineSymbol,
				offset: '50%'}]
			});
		drivingPath.setMap(map);
		pathArray.push(drivingPath);	
	}
	function addLatLng(event){
		position[count] = event.latLng;
		window.external.setLatAndLng(count, event.latLng.toUrlValue());
		count++;
		var marker = new google.maps.Marker({
			position: event.latLng,
			map: map,
			title: "Hello"
			});
		markerArray.push(marker);		
	}
	function drawRoute(){
		var ans = new Array();
		var n = position.length;
		for(var i=0;i<n;i++)
			ans[i] = i;
		for(var i=1;i<n;i++){
			var temp = ans[i-1]*n+ans[i];
			ansRoute[count_ans] = responseTotal[temp];
			count_ans++;
		}
		myDraw(ansRoute);
	}
	function getDistance(){
		var str = "";
		for(var i=0;i<distance.length;i++)
			str += distance[i].toString()+",";
		alert(str);
		document.getElementById("hid").value = str;
	}

	function getPosition(){
		return position.length;
	}

	function Check(){
		var str = "";
		for(var i=0;i<distance.length;i++)
			for(var j=0;j<distance[i].length;j++)
			{
				str += distance[i][j].toString() + ",";
			}
		document.getElementById("hid").value = str;
	}
	function getAddress(var1){
		var address = var1;
		geocoder.geocode({"address": address}, function(results, status){
				if(status == google.maps.GeocoderStatus.OK){
				map.setCenter(results[0].geometry.location);
				var marker = new google.maps.Marker({
					map: map,
					position: results[0].geometry.location
					});
				markerArray.push(marker);
				}else{
				alert("Geocode was not successful for the following reason: " + status);
				}
				});
	}
	function increaseZoom(){
		var zoom = map.getZoom();
		zoom++;
		map.setZoom(zoom);
	}
	function decreaseZoom(){
		var zoom = map.getZoom();
		zoom--;
		map.setZoom(zoom);
	}
	function changeMapType(var1){
		var num = var1;
		if(num == 0)
			map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
		else if(num == 1)
			map.setMapTypeId(google.maps.MapTypeId.SATELLITE);
		else if(num == 2)
			map.setMapTypeId(google.maps.MapTypeId.HYBRID);
		else
			map.setMapTypeId(google.maps.MapTypeId.TERRAIN);
	}
	function clean(){
		if(markerArray){
			for(i in markerArray){
				markerArray[i].setMap(null);
			}
		}
		if(pathArray){
			for(i in pathArray){
				pathArray[i].setMap(null);
			}
		}
		markerArray.length = 0;
		pathArray.length = 0;
		position.length = 0;
		count = 0;
	}

    </script>
    <title></title>
</head>
<body onload="initialize(40.7711329, -73.9741874)">
<div id="map_canvas" style="width: 100%; height: 100%"></div>
<p id="demo">My First Paragraph</p>
<input type="hidden" id="hid">
<input type="hidden" id="hid2">
</body>
</html>
